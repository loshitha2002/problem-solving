# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14hbesT8N1zCONNj1gfntTPp5cOSSC0qP
"""

#You are given an image represented by an m x n grid of integers image, where image[i][j] represents the pixel value of the image. You are also given three integers sr, sc, and color. Your task is to perform a flood fill on the image starting from the pixel image[sr][sc].

#To perform a flood fill:

#Begin with the starting pixel and change its color to color.
#Perform the same process for each pixel that is directly adjacent (pixels that share a side with the original pixel, either horizontally or vertically) and shares the same color as the starting pixel.
#Keep repeating this process by checking neighboring pixels of the updated pixels and modifying their color if it matches the original color of the starting pixel.
#The process stops when there are no more adjacent pixels of the original color to update.
#Return the modified image after performing the flood fill.



#Example 1:

#Input: image = [[1,1,1],[1,1,0],[1,0,1]], sr = 1, sc = 1, color = 2

#Output: [[2,2,2],[2,2,0],[2,0,1]]

def floodFill(image, sr, sc, color):
    rows, cols = len(image), len(image[0])
    original_color = image[sr][sc]

    if original_color == color:
        return image  # No need to fill if the color is the same

    def dfs(r, c):
        if r < 0 or r >= rows or c < 0 or c >= cols or image[r][c] != original_color:
            return

        image[r][c] = color  # Fill the cell with the new color
        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]  # Right, Down, Left, Up

        for dr, dc in directions:
            dfs(r + dr, c + dc)

    dfs(sr, sc)
    return image

# Function to take user input
def get_user_input():
    # Input the number of rows and columns
    rows = int(input("Enter the number of rows: "))
    cols = int(input("Enter the number of columns: "))

    # Input the matrix
    print("Enter the image matrix row by row (space-separated values):")
    image = []
    for _ in range(rows):
        image.append(list(map(int, input().split())))

    # Input the starting position (sr, sc)
    sr, sc = map(int, input("Enter the starting row and column (sr sc): ").split())

    # Input the new color
    color = int(input("Enter the new color: "))

    return image, sr, sc, color

# Function to display the matrix
def print_image(image):
    for row in image:
        print(" ".join(map(str, row)))

# Main function
if __name__ == "__main__":
    image, sr, sc, color = get_user_input()
    print("\nOriginal Image:")
    print_image(image)

    updated_image = floodFill(image, sr, sc, color)

    print("\nUpdated Image after Flood Fill:")
    print_image(updated_image)

#Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.

#An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.



#Example 1:

#Input: grid = [
 # ["1","1","1","1","0"],
 # ["1","1","0","1","0"],
  #["1","1","0","0","0"],
  #["0","0","0","0","0"]
#]
#Output: 1
#Example 2:

#Input: grid = [
 # ["1","1","0","0","0"],
  #["1","1","0","0","0"],
 # ["0","0","1","0","0"],
 # ["0","0","0","1","1"]
#]
#Output: 3

from typing import List

class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:

        def dfs(i, j):
            if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] != '1':
                return
            grid[i][j] = '0'  # Mark as visited
            dfs(i, j+1)  # Right
            dfs(i+1, j)  # Down
            dfs(i, j-1)  # Left
            dfs(i-1, j)  # Up

        num_islands = 0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == '1':
                    num_islands += 1
                    dfs(i, j)

        return num_islands

# Function to take user input and process it
def main():
    m = int(input("Enter number of rows: "))
    n = int(input("Enter number of columns: "))

    print("Enter the grid row by row (each row as space-separated 0s and 1s):")
    grid = [input().strip().split() for _ in range(m)]  # Ensure list of list of strings

    solution = Solution()
    result = solution.numIslands(grid)
    print("Number of islands:", result)

if __name__ == "__main__":
    main()