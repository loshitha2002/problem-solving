# -*- coding: utf-8 -*-
"""Counting_Rooms(islandtype).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mTAXUl5eL76vmN5zPUfFz6Pe5YSgstI2
"""

#with space

from typing import List

class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:

        def dfs(i, j):
            if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] != '.':
                return
            grid[i][j] = '#'  # Mark as visited
            dfs(i, j+1)  # Right
            dfs(i+1, j)  # Down
            dfs(i, j-1)  # Left
            dfs(i-1, j)  # Up

        num_islands = 0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == '.':
                    num_islands += 1
                    dfs(i, j)

        return num_islands

# Function to take user input and process it
def main():
    m = int(input("Enter number of rows: "))
    n = int(input("Enter number of columns: "))

    print("Enter the grid row by row (each row as space-separated 0s and 1s):")
    grid = [input().strip().split() for _ in range(m)]  # Ensure list of list of strings

    solution = Solution()
    result = solution.numIslands(grid)
    print("Number of islands:", result)

if __name__ == "__main__":
    main()



#with space

from typing import List

class Solution:
    def numRooms(self, grid: List[List[str]]) -> int:

        def dfs(i, j):
            if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] != '.':
                return
            grid[i][j] = '#'  # Mark as visited
            dfs(i, j+1)  # Right
            dfs(i+1, j)  # Down
            dfs(i, j-1)  # Left
            dfs(i-1, j)  # Up

        num_rooms = 0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == '.':
                    num_rooms += 1
                    dfs(i, j)

        return num_rooms

# Function to take user input and process it
def main():
    # Read the grid dimensions
    n, m = map(int, input().split())

    # Read the grid
    grid = [input().strip().split() for _ in range(n)]

    # Compute number of rooms
    solution = Solution()
    result = solution.numRooms(grid)

    # Print the result
    print(result)

if __name__ == "__main__":
    main()

#without space

class Solution:
    def numRooms(self, grid) -> int:

        def dfs(i, j):
            if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] != '.':
                return

            # Convert row to a string with '#' marking visited cells
            grid[i] = grid[i][:j] + '#' + grid[i][j+1:]

            dfs(i, j+1)  # Right
            dfs(i+1, j)  # Down
            dfs(i, j-1)  # Left
            dfs(i-1, j)  # Up

        num_rooms = 0
        grid = list(grid)  # Convert tuple to list (mutable) for modification

        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == '.':
                    num_rooms += 1
                    dfs(i, j)

        return num_rooms

# Function to take user input and process it
def main():
    # Read the grid dimensions
    n, m = map(int, input().split())

    # Read the grid as a tuple of strings (immutable initially)
    grid = tuple(input().strip() for _ in range(n))

    # Compute number of rooms
    solution = Solution()
    result = solution.numRooms(grid)

    # Print the result
    print(result)

if __name__ == "__main__":
    main()